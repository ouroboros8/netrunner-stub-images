#! /usr/bin/env python

import errno
from os import mkdir, path
import subprocess
from itertools import groupby
from re import split
from multiprocessing import Pool

from colorama import Fore, Style
import requests
from unidecode import unidecode

nrdb_api = 'https://netrunnerdb.com/api/2.0'

def slugify(string):
    '''
    Slugifies a string for use in URLs by:
      1. normalizing it with unidecode
      2. lower casing it
      3. splitting it into words parts
      4. joining the words with hyphens
    '''
    slug_parts = filter(None, list(split(r'\W+', unidecode(string).lower())))
    return '-'.join(slug_parts)

def title(card):
    return card['title']

def normalized_title(card):
    return slugify(card['title'])

def newest(cards):
    '''
    Determines the newest of a list of printed cards by comparing card codes.

    This can be used to find the most recent printing of a card that was in
    multiple sets.
    '''
    return sorted(
        cards,
        key=lambda card: int(card['code'])
    ).pop()

def newest_card_printings(cards):
    '''
    Given a list of cards, returns a list of only the latest printing of each
    uniquely titled card.
    '''
    grouped_cards = groupby(sorted(cards, key=title), title)

    for _, cards in grouped_cards:
        yield newest(cards)

def image_url(card, image_url_template):
    '''
    Tries to retrieve a card's image_url from card data, or falls back to
    constructing URLs with the provided template.
    '''
    return card.get('image_url', image_url_template.format(code=card['code']))

def download_image(card):
    url = image_url(card, image_url_template)
    extension = url.split('.').pop()

    filename = path.join(
        'images',
        normalized_title(card) + '.' + extension
    )

    print('Downloading %s from %s...' % (card['title'], url))
    result = subprocess.call(['curl', '-s', '-o', filename, url])
    if result == 0:
        print(filename + ' downloaded ' + Fore.GREEN + 'OK' + Style.RESET_ALL)
    else:
        print(Fore.RED + 'Failed to download ' + card['title'] + Style.RESET_ALL)

if __name__ == '__main__':

    try:
        mkdir('images')
    except FileExistsError:
        pass

    resp = requests.get(nrdb_api + '/public/cards').json()

    cards = newest_card_printings(resp['data'])
    image_url_template = resp['imageUrlTemplate']

    with Pool(16) as pool:
        pool.map(download_image, cards)
